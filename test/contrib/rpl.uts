% RPL layer test campaign

+ Syntax check
= Import the RPL layer
from scapy.contrib.rpl import *
from scapy.contrib.rpl_metrics import *

+ Test RPL Control Messages
= RPL Base Objects construction
assert(raw(RPL()/DIS()) == b'\x9b\x00\x00\x00\x00\x00')
assert(raw(RPL()/DIO()) == b'\x9b\x01\x00\x00\x32\x00\x00\x01\x88\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01')
assert(raw(RPL()/DAO()) == b'\x9b\x02\x00\x00\x32\x00\x00\x01')
assert(raw(RPL()/DAOACK()) == b'\x9b\x03\x00\x00\x32\x00\x01\x00')
assert(raw(RPL()/DCO()) == b'\x9b\x07\x00\x00\x32\x00\x00\x01')
assert(raw(RPL()/DCOACK()) == b'\x9b\x08\x00\x00\x32\x00\x01\x00')
p=raw(IPv6(src="fe80::1")/RPL()/DCOACK()/PadN(optdata='0'*10))
assert(p == b'\x60\x00\x00\x00\x00\x14\x3a\x40\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x9b\x08\x42\x0f\x32\x00\x01\x00\x01\x0a\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30')

p = raw(IPv6(src="fe80::1")/RPL()/DCO()/OptTgt(prefix="fd00::1", plen=128))
assert(p == b'\x60\x00\x00\x00\x00\x1c\x3a\x40\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x9b\x07\x32\x6e\x32\x00\x00\x01\x05\x12\x00\x80\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01')


= RPL Base Objects dissection
# Test DIS dissection
p = RPL(b'\x9b\x00\x00\x00\x00\x00')
assert(p.code == 0)

# Test DIO dissection
p = RPL(b'\x9b\x01\x00\x00\x32\x00\x00\x01\x88\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01')
assert(p.code == 1)
assert(p.RPLInstanceID == 50)
assert(p.ver == 0)
assert(p.rank == 1)
assert(p.G == 1)
assert(p.mop == 1)
assert(p.dtsn == 240)
assert(p.dodagid == "::1")

# Test DAO dissection
p = RPL(b'\x9b\x02\x00\x00\x32\x00\x00\x01')
assert(p.code == 2)

+ Test RPL Control Message Options
= RPL Control Options construction
# DIS
assert(raw(RPL()/DIS()/Pad1()) == b'\x9b\x00\x00\x00\x00\x00\x00')

# DIS with solicited info option
assert(raw(RPL()/DIS()/OptSolInfo()) == \
        b'\x9b\x00\x00\x00\x00\x00\x07\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')

# DIO with DAG MC option with link ETX metric
assert(raw(RPL()/DIO()/OptDAGMC()/LinkETX()) == \
        b'\x9b\x01\x00\x00\x32\x00\x00\x01\x88\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x06\x07\x00\x00\x02\x00\x01')

# Normal DAO message with single target, since transit
assert(raw(IPv6(src="fe80::1", dst="fe80::2")/\
        RPL()/DAO()/\
        OptTgt(plen=128,prefix="fd00::1")/\
        OptTIO()) == \
        b'\x60\x00\x00\x00\x00\x22\x3a\x40\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x9b\x02\x2c\x04\x32\x00\x00\x01\x05\x12\x00\x80\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x06\x04\x00\x00\x00\xff')

assert(raw(RPL()/DAO(D=1, dodagid="fd00::1")/OptDAGMC()) == \
    b'\x9b\x02\x00\x00\x32\x40\x00\x01\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00')

p=IPv6(b'\x60\x00\x00\x00\x00\x32\x3a\x40\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfe\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x9b\x02\x12\x08\x32\x40\x00\x01\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x05\x12\x00\x80\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x06\x04\x00\x00\x6f\xff')
assert(p.payload.code == 2) # Its a DAO

p=IPv6(b'\x60\x00\x00\x00\x00\x1c\x3a\x40\xfe\x80\x00\x00\x00\x00\x00\x00\x0f\x86\xcc\x88\xaf\xfa\xbe\x25\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x9b\x07\xe8\x3f\x32\x00\x00\x01\x05\x12\x00\x80\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01')
assert(p.payload.code == 7) # Its a DCO
